syntax = "proto3";

option go_package = "github.com/litneet64/lab-2-squid-game/protogrpc";

package protogrpc;

//
// PLAYER - LEADER COMMS
//

service GameInteraction {
  // Player asks Leader to join the game
  rpc PlayerJoin (JoinGameRequest) returns (JoinGameReply);

  // Leader tells Player that round started with state
  rpc RoundStart (RoundState) returns (PlayerAck);

  // Player tells Leader what move they use, Leader responds with 
  // it's new state
  rpc PlayerAction (PlayerMove) returns (PlayerState);

  // Player tells Leader a command (e.g. read pool prize)
  rpc RequestCommand (PlayerCommand) returns (CommandReply);

  // Leader tells Players to wait (listen) for a second message with
  // their state because it depends on other Players
  //rpc RoundResult (PlayerState) returns (PlayerAck);
}


// player to leader - movement || join game
message JoinGameRequest {
  optional uint32 player_id = 1;
}

// leader to player - player state || accept join
message JoinGameReply {
  enum rspType {
    ACCEPT_JOIN = 0;
    DENY_JOIN = 1;
  }
  optional rspType msg = 1;
}

// -- PlayerAction messages
message PlayerMove {
  optional uint32 player_id = 1;
  optional uint32 move = 2;
  optional uint32 stage = 3;
}

message PlayerState {
  enum state {
    ALIVE = 0;
    DEAD = 1;
    WAITING = 2;
    NOTPLAYING = 3;
  }
  optional state player_state = 1;
  
}
// -- RoundStart messages:

message RoundState {
  enum state {
    ALIVE = 0;
    DEAD = 1;
    WAITING = 2;
  }

  optional uint32 stage = 1;
  optional uint32 round = 2;
  optional state player_state = 3;
}

message PlayerAck {}

// -- RequestCommand messages
message PlayerCommand {
  enum commandType {
    POOL = 0;
  }
  optional uint32 player_id = 1;
  optional commandType command = 2;
  optional RoundState roundState = 3;
}

message CommandReply {
  optional uint32 reply = 1;
}

